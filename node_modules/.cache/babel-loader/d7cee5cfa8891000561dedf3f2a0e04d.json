{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAMPAT\\\\Desktop\\\\React-Food-Order\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch('https://react-http-80741-default-rtdb.firebaseio.com/meals.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      const responseData = await response.json();\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    try {\n      fetchMeals();\n    } catch (error) {\n      setIsLoading(false);\n      setHttpError(error.message);\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  const mealList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 42\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/Users/SAMPAT/Desktop/React-Food-Order/src/components/Meals/AvailableMeals.js"],"names":["useEffect","useState","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","message","MealsLoading","mealList","map","meal"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAIA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAK,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAG,YAAY;AAEjC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAD,CAA5B;;AAEF,UAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAEC,YAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AAEF,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAI,MAAMC,GAAV,IAAiBH,YAAjB,EAA+B;AAC7BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAAEF,GADW;AAEfG,UAAAA,IAAI,EAAEN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFT;AAGfC,UAAAA,WAAW,EAAEP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHhB;AAIfC,UAAAA,KAAK,EAAER,YAAY,CAACG,GAAD,CAAZ,CAAkBK;AAJV,SAAjB;AAMD;;AACDlB,MAAAA,QAAQ,CAACY,WAAD,CAAR;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACK,KAtBD;;AAwBJ,QAAG;AACHG,MAAAA,UAAU;AACT,KAFD,CAEE,OAAMc,KAAN,EAAa;AACfjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,YAAY,CAACe,KAAK,CAACC,OAAP,CAAZ;AACC;AAGE,GAjCQ,EAiCN,EAjCM,CAAT;;AAmCF,MAAGnB,SAAH,EAAc;AACZ,wBACE;AAAS,MAAA,SAAS,EAAEJ,OAAO,CAACwB,YAA5B;AAAA,6BACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAGlB,SAAH,EAAc;AACZ,wBAAS;AAAS,MAAA,SAAS,EAAEN,OAAO,CAACwB;AAA5B;AAAA;AAAA;AAAA;AAAA,YAAT;AACD;;AAEG,QAAMC,QAAQ,GAAGvB,KAAK,CAACwB,GAAN,CAAWC,IAAD,iBAAU,QAAC,QAAD;AAAwB,IAAA,EAAE,EAAEA,IAAI,CAACT,EAAjC;AAAqC,IAAA,IAAI,EAAES,IAAI,CAACR,IAAhD;AAAsD,IAAA,WAAW,EAAEQ,IAAI,CAACP,WAAxE;AAAqF,IAAA,KAAK,EAAEO,IAAI,CAACN;AAAjG,KAAeM,IAAI,CAACT,EAApB;AAAA;AAAA;AAAA;AAAA,UAApB,CAAjB;AACA,sBACA;AAAS,IAAA,SAAS,EAAElB,OAAO,CAACE,KAA5B;AAAA,2BACA,QAAC,IAAD;AAAA,6BACA;AAAA,kBACEuB;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADA;AASH,CA9DD;;GAAMxB,c;;KAAAA,c;AAkEN,eAAeA,cAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Card from '../UI/Card';\r\nimport MealItem from './MealItem/MealItem';\r\nimport classes from './AvailableMeals.module.css';\r\n\r\n\r\n\r\nconst AvailableMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const[isLoading, setIsLoading] = useState(true);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      \r\n  const response = await fetch('https://react-http-80741-default-rtdb.firebaseio.com/meals.json');\r\n\r\nif(!response.ok){\r\n  throw new Error('Something went wrong');\r\n}\r\n\r\n  const responseData = await response.json();\r\n\r\nconst loadedMeals = [];\r\n\r\nfor(const key in responseData) {\r\n  loadedMeals.push({\r\n    id: key,\r\n    name: responseData[key].name,\r\n    description: responseData[key].description,\r\n    price: responseData[key].price,\r\n  });\r\n}\r\nsetMeals(loadedMeals);\r\nsetIsLoading(false);\r\n    };\r\n\r\ntry{\r\nfetchMeals();\r\n} catch(error) {\r\nsetIsLoading(false);\r\nsetHttpError(error.message);\r\n}\r\n\r\n  \r\n  }, []);\r\n\r\nif(isLoading) {\r\n  return (\r\n    <section className={classes.MealsLoading}>\r\n  <p>Loading...</p>\r\n    </section>\r\n  );\r\n}\r\n\r\nif(httpError) {\r\n  return ( <section className={classes.MealsLoading}>{}</section>)\r\n}\r\n\r\n    const mealList = meals.map((meal) =>(<MealItem key={meal.id} id={meal.id} name={meal.name} description={meal.description} price={meal.price}/>));\r\n    return ( \r\n    <section className={classes.meals}>\r\n    <Card>\r\n    <ul>\r\n     {mealList}\r\n    </ul>\r\n    </Card>\r\n    </section>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}